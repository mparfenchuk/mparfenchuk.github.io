{"version":3,"sources":["app/navigation.tsx","main/main.tsx","app/actions.ts","app/constants.ts","app/reducer.ts","hooks-todo/list.tsx","app/helpers.ts","hooks-todo/form.tsx","hooks-todo/resetButton.tsx","hooks-todo/main.tsx","redux-thunk-todo/store.ts","app/api.ts","redux-thunk-todo/list.tsx","redux-thunk-todo/thunk.ts","redux-thunk-todo/form.tsx","redux-thunk-todo/resetButton.tsx","redux-thunk-todo/main.tsx","redux-saga-todo/constants.ts","redux-saga-todo/sagas.ts","redux-saga-todo/store.ts","redux-saga-todo/list.tsx","redux-saga-todo/actions.ts","redux-saga-todo/form.tsx","redux-saga-todo/resetButton.tsx","redux-saga-todo/main.tsx","context-api-todo/store.ts","context-api-todo/list.tsx","context-api-todo/form.tsx","context-api-todo/resetButton.tsx","context-api-todo/main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["breadcrumbNameMap","useStyles","makeStyles","theme","createStyles","breadcrumbs","marginTop","spacing","marginBottom","withRouter","location","classes","pathnames","pathname","split","filter","x","Breadcrumbs","className","length","Link","component","RouterLink","to","color","Typography","map","value","index","last","slice","join","key","Main","Container","maxWidth","variant","gutterBottom","add","todo","type","remove","id","toggle","reset","initialState","todos","reducer","state","action","active","activeTodo","textDecoration","List","removeTodo","toggleTodo","disablePadding","ListItem","dense","button","onClick","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","ListItemText","clsx","title","ListItemSecondaryAction","IconButton","size","createTodo","prefix","uniqueId","Form","addTodo","useState","setTitle","onSubmit","e","preventDefault","autoComplete","TextField","name","label","onChange","target","margin","fullWidth","required","InputProps","endAdornment","InputAdornment","position","ResetButton","Button","useReducer","dispatch","middlewares","thunkMiddleware","store","createStore","compose","applyMiddleware","apiCall","Promise","resolve","reject","setTimeout","sample","Error","dispatchThunk","useDispatch","useSelector","a","console","error","message","fetchAddTodo","REQUEST_TO_ADD","REQUEST_TO_REMOVE","REQUEST_TO_TOGGLE","REQUEST_TO_RESET","requestAddTodo","requestRemoveTodo","requestToggleTodo","requestReset","watchAddTodo","watchRemoveTodo","watchToggleTodo","watchReset","data","call","put","takeEvery","rootSaga","root","all","fork","sagaMiddleware","createSagaMiddleware","run","constants","requestToAdd","TodoStateContext","createContext","TodoDispatchContext","useTodoDispatch","useContext","Provider","createMuiTheme","typography","fontFamily","App","ThemeProvider","basename","process","exact","path","HooksTodo","ReduxThunkTodo","ReduxSagaTodo","ContextApiTodo","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ed53f0b.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter, Link as RouterLink } from 'react-router-dom';\nimport { RouteComponentProps } from \"react-router\";\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\nconst breadcrumbNameMap: { [key: string]: string } = {\n    '/hooks': 'hooks',\n    '/redux-thunk': 'redux-thunk',\n    '/redux-saga': 'redux-saga',\n    '/context-api': 'context-api'\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        breadcrumbs: {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        }\n    })\n);\n\nconst Navigation = ({ location }: RouteComponentProps) => {\n    const classes = useStyles();\n    const pathnames = location.pathname.split('/').filter(x => x);\n\n    return (\n        <Breadcrumbs className={classes.breadcrumbs}>\n            {pathnames.length > 0 ? <Link \n                    component={RouterLink} \n                    to='/'\n                    color=\"inherit\"\n                >\n                    home\n                </Link>\n            :\n                <Typography color=\"textPrimary\">\n                    home\n                </Typography>}\n            {pathnames.map((value, index) => {\n                const last = index === pathnames.length - 1;\n                const to = `/${pathnames.slice(0, index + 1).join('/')}`;\n\n                return last ? (\n                    <Typography key={to} color=\"textPrimary\">\n                        {breadcrumbNameMap[to]}\n                    </Typography>\n                ) : (\n                    <Link\n                        key={to}\n                        to={to} \n                        component={RouterLink}\n                        color=\"inherit\"\n                    >\n                        {breadcrumbNameMap[to]}\n                    </Link>\n                );\n            })}\n        </Breadcrumbs>\n    )\n}\n\nexport default withRouter(Navigation);","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Navigation from '../app/navigation';\n\nconst Main = () => (\n    <Container maxWidth=\"sm\">\n        <Navigation />\n        <Typography variant=\"h3\" gutterBottom>\n            Choose Example\n        </Typography>\n        <Link \n            component={RouterLink} \n            to='/hooks'\n        >\n            /hooks\n        </Link>\n        <br/>\n        <Link \n            component={RouterLink} \n            to='/redux-thunk'\n        >\n            /redux-thunk\n        </Link>\n        <br/>\n        <Link \n            component={RouterLink} \n            to='/redux-saga'\n        >\n            /redux-saga\n        </Link>\n        <br/>\n        <Link \n            component={RouterLink} \n            to='/context-api'\n        >\n            /context-api\n        </Link>\n    </Container>\n)\n\nexport default Main;","import { Add, Remove, Toggle, Reset, Todo } from './types';\nimport * as constants from './constants';\n\nexport const add = (todo: Todo): Add => ({ type: constants.ADD, todo })\nexport const remove = (id: string): Remove => ({ type: constants.REMOVE, id })\nexport const toggle = (id: string): Toggle => ({ type: constants.TOGGLE, id })\nexport const reset = (): Reset => ({ type: constants.RESET })\n","export const ADD = \"ADD\"\nexport type ADD = typeof ADD\n\nexport const REMOVE = \"REMOVE\"\nexport type REMOVE = typeof REMOVE\n\nexport const TOGGLE = \"TOGGLE\"\nexport type TOGGLE = typeof TOGGLE\n\nexport const RESET = \"RESET\"\nexport type RESET = typeof RESET\n","import { State, Actions } from './types';\nimport { ADD, REMOVE, TOGGLE, RESET } from './constants';\n\nexport const initialState: State = {\n    todos: []\n}\n\nexport const reducer = (state = initialState, action: Actions): State => {\n    switch(action.type){\n        case ADD:\n            return {\n                todos: [action.todo, ...state.todos]\n            }\n        case REMOVE:\n            return { \n                todos: state.todos.filter(todo => todo.id !== action.id)\n            }\n        case TOGGLE:\n            return { \n                todos: state.todos.map(todo => \n                    todo.id === action.id \n                    ? {...todo, active: !todo.active} \n                    : todo \n                )\n            }\n        case RESET:\n            return initialState\n        default:\n            return state\n    }\n}\n","import React from 'react';\n\nimport clsx from 'clsx';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport MaterialUIList from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { Todo } from '../app/types';\n\ninterface Props {\n    todos: Array<Todo>,\n    removeTodo: (id: string) => void,\n    toggleTodo: (id: string) => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        activeTodo: {\n            textDecoration: 'line-through'\n        }\n    }),\n);\n\nconst List = ({ todos, removeTodo, toggleTodo }: Props) => {\n    const classes = useStyles()\n\n    return (\n        <MaterialUIList disablePadding>\n            {todos.map(todo => {\n                return (\n                    <ListItem \n                        key={todo.id} \n                        dense\n                        button\n                        onClick={() => toggleTodo(todo.id)}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={!todo.active}\n                                tabIndex={-1}\n                                disableRipple\n                            />\n                        </ListItemIcon>\n                        <ListItemText className={clsx(!todo.active && classes.activeTodo)}>\n                            {todo.title}\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <IconButton \n                                onClick={() => removeTodo(todo.id)}\n                                edge=\"end\"\n                                color=\"primary\"\n                                size=\"small\"\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                )\n            })}\n        </MaterialUIList>\n    )\n}\n\nexport default List;","import uniqueId from 'lodash/uniqueId';\nimport { Todo } from './types';\n\nexport const createTodo = (prefix: string, title: string): Todo => ({ \n    id: uniqueId(prefix), \n    active: true, \n    title \n})\n","import React, { useState } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport { createTodo } from '../app/helpers';\nimport { Todo } from '../app/types';\n\ninterface Props {\n    addTodo: (todo: Todo) => void\n}\n\nconst Form = ({ addTodo }: Props) => {\n    const [title, setTitle] = useState('')\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        const todo = createTodo('hooks_todo_', title)\n\n        addTodo(todo)\n        setTitle('')\n    }\n\n    return(\n        <form onSubmit={handleSubmit} autoComplete=\"off\">\n            <TextField\n                name=\"todo\"\n                label=\"Add todo\"\n                value={title}\n                onChange={e => setTitle(e.target.value)}\n                margin=\"normal\"\n                fullWidth\n                required\n                InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">\n                        <IconButton \n                            type=\"submit\" \n                            color=\"primary\"\n                            size=\"small\"\n                        >\n                            <AddIcon />\n                        </IconButton>\n                    </InputAdornment>,\n                }}\n            />\n        </form>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\ninterface Props {\n    reset: () => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        button: {\n            marginTop: theme.spacing(1),\n        }\n    }),\n);\n\nconst ResetButton = ({ reset }: Props) => {\n    const classes = useStyles()\n\n    return (\n        <Button \n            onClick={() => reset()}\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.button}\n        >\n            Reset\n        </Button>\n    )\n}\n\nexport default ResetButton;\n","import React, { useReducer } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport { add, remove, toggle, reset } from '../app/actions';\nimport { initialState, reducer } from '../app/reducer';\nimport Navigation from '../app/navigation';\n\nimport List from './list';\nimport Form from './form';\nimport ResetButton from './resetButton';\n\nconst Main = () => {\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    return (\n        <Container maxWidth=\"sm\">\n            <Navigation />\n            <Typography variant=\"h5\">\n                Todos With Hooks\n            </Typography>\n            <Form addTodo={todo => dispatch(add(todo))}/>\n            <List \n                todos={state.todos}\n                removeTodo={id => dispatch(remove(id))}\n                toggleTodo={id => dispatch(toggle(id))}\n            />\n            <ResetButton reset={() => dispatch(reset())}/>\n        </Container>\n    )\n}\n\nexport default Main;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { reducer } from '../app/reducer';\n\nexport type AppState = ReturnType<typeof reducer> \n\nconst middlewares = [\n    thunkMiddleware\n]\n\nconst store = createStore(reducer, compose(applyMiddleware(...middlewares)));\n\nexport default store;","import sample from 'lodash/sample';\n\nexport const apiCall = (value?: any): Promise<void | string> => {\n    const promise = new Promise<void | string>((resolve, reject) => {\n      setTimeout(() => {\n        if (sample([true, false]))\n            resolve('Success :)');\n        else \n            reject(new Error('Error :('))\n      }, 1000)\n    });\n  \n    return promise;\n}\n","import React from 'react';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport clsx from 'clsx';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport MaterialUIList from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { Actions, Todo } from '../app/types';\nimport { AppState } from './store';\nimport { fetchToggleTodo, fetchRemoveTodo } from './thunk';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        activeTodo: {\n            textDecoration: 'line-through'\n        }\n    }),\n);\n\nconst List = () => {\n    const classes = useStyles()\n    const dispatchThunk = useDispatch<ThunkDispatch<AppState, null, Actions>>()\n    const todos = useSelector<AppState, Array<Todo>>((state: AppState) => state.todos)\n\n    return(\n        <MaterialUIList disablePadding>\n            {todos.map(todo => {\n                return (\n                    <ListItem \n                        key={todo.id} \n                        dense\n                        button\n                        onClick={() => dispatchThunk(fetchToggleTodo(todo.id))}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={!todo.active}\n                                tabIndex={-1}\n                                disableRipple\n                            />\n                        </ListItemIcon>\n                        <ListItemText className={clsx(!todo.active && classes.activeTodo)}>\n                            {todo.title}\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <IconButton \n                                onClick={() => dispatchThunk(fetchRemoveTodo(todo.id))}\n                                edge=\"end\"\n                                color=\"primary\"\n                                size=\"small\"\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                )\n            })}\n        </MaterialUIList>\n    )\n}\n\nexport default List;","import { ThunkAction } from 'redux-thunk';\n\nimport { add, remove, toggle, reset } from '../app/actions';\nimport { Actions, Todo } from '../app/types';\nimport { apiCall } from '../app/api';\n\nimport { AppState } from './store';\n\nexport const fetchAddTodo = (todo: Todo): ThunkAction<void, AppState, null, Actions> => async dispatch => {\n    try {\n        await apiCall(todo)\n        dispatch(add(todo))\n    } catch(e) {\n        console.error(e.message)\n    }\n}\n\nexport const fetchRemoveTodo = (id: string): ThunkAction<void, AppState, null, Actions> => async dispatch => {\n    try {\n        await apiCall(id)\n        dispatch(remove(id))\n    } catch(e) {\n        console.error(e.message)\n    }\n}\n\nexport const fetchToggleTodo = (id: string): ThunkAction<void, AppState, null, Actions> => async dispatch => {\n    try {\n        await apiCall(id)\n        dispatch(toggle(id))\n    } catch(e) {\n        console.error(e.message)\n    }\n}\n\nexport const fetchReset = (): ThunkAction<void, AppState, null, Actions> => async dispatch => {\n    try {\n        await apiCall()\n        dispatch(reset())\n    } catch(e) {\n        console.error(e.message)\n    }\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport { Actions } from '../app/types';\nimport { createTodo } from '../app/helpers';\n\nimport { fetchAddTodo } from './thunk';\nimport { AppState } from './store';\n\nconst Form = () => {\n\n    const dispatchThunk = useDispatch<ThunkDispatch<AppState, null, Actions>>()\n    \n    const [title, setTitle] = useState('')\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        const todo = createTodo('thunk_todo_', title)\n\n        dispatchThunk(fetchAddTodo(todo))\n        setTitle('')\n    }\n\n    return(\n        <form onSubmit={handleSubmit} autoComplete=\"off\">\n            <TextField\n                name=\"todo\"\n                label=\"Add todo\"\n                value={title}\n                onChange={e => setTitle(e.target.value)}\n                margin=\"normal\"\n                fullWidth\n                required\n                InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">\n                        <IconButton \n                            type=\"submit\" \n                            color=\"primary\"\n                            size=\"small\"\n                        >\n                            <AddIcon />\n                        </IconButton>\n                    </InputAdornment>,\n                }}\n            />\n        </form>\n    )\n}\n\nexport default Form;","import React from 'react';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { useDispatch } from 'react-redux';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport { Actions } from '../app/types';\nimport { AppState } from './store';\nimport { fetchReset } from './thunk';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        button: {\n            marginTop: theme.spacing(1),\n        }\n    }),\n);\n\nconst ResetButton = () => {\n    const classes = useStyles()\n    const dispatchThunk = useDispatch<ThunkDispatch<AppState, null, Actions>>()\n\n    return(\n        <Button \n            onClick={() => dispatchThunk(fetchReset())}\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.button}\n        >\n            Reset\n        </Button>\n    )\n}\n\nexport default ResetButton;","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Navigation from '../app/navigation';\n\nimport store from './store';\n\nimport List from './list';\nimport Form from './form';\nimport ResetButton from './resetButton';\n\nconst Main = () => (\n    <Provider store={store}>\n        <Container maxWidth=\"sm\">\n            <Navigation />\n            <Typography variant=\"h5\">\n                Todos With Redux-Thunk\n            </Typography>\n            <Form />\n            <List />\n            <ResetButton />\n        </Container>\n    </Provider>\n)\n\nexport default Main;","export const REQUEST_TO_ADD = \"REQUEST_TO_ADD\"\nexport type REQUEST_TO_ADD = typeof REQUEST_TO_ADD\n\nexport const REQUEST_TO_REMOVE = \"REQUEST_TO_REMOVE\"\nexport type REQUEST_TO_REMOVE = typeof REQUEST_TO_REMOVE\n\nexport const REQUEST_TO_TOGGLE = \"REQUEST_TO_TOGGLE\"\nexport type REQUEST_TO_TOGGLE = typeof REQUEST_TO_TOGGLE\n\nexport const REQUEST_TO_RESET = \"REQUEST_TO_RESET\"\nexport type REQUEST_TO_RESET = typeof REQUEST_TO_RESET\n","import { call, put, takeEvery, all, fork } from 'redux-saga/effects';\n\nimport { add, remove, toggle, reset } from '../app/actions';\nimport { apiCall } from '../app/api';\n\nimport { REQUEST_TO_ADD, REQUEST_TO_REMOVE, REQUEST_TO_TOGGLE, REQUEST_TO_RESET } from './constants';\nimport { RequestToAdd, RequestToRemove, RequestToToggle, RequestToReset } from './types';\n\nfunction* requestAddTodo(data: RequestToAdd) {\n    try {\n        yield call(apiCall)\n        yield put(add(data.todo))\n    } catch(e) {\n        console.error(e.message)\n    }\n}\n\nfunction* requestRemoveTodo(data: RequestToRemove) {\n    try {\n        yield call(apiCall)\n        yield put(remove(data.id))\n    } catch(e) {\n        console.error(e.message)\n    }\n}\n\nfunction* requestToggleTodo(data: RequestToToggle) {\n    try {\n        yield call(apiCall)\n        yield put(toggle(data.id))\n    } catch(e) {\n        console.error(e.message)\n    }\n}\n\nfunction* requestReset(data: RequestToReset) {\n    try {\n        yield call(apiCall)\n        yield put(reset())\n    } catch(e) {\n        console.error(e.message)\n    }\n}\n\nfunction* watchAddTodo() {\n    yield takeEvery(REQUEST_TO_ADD, requestAddTodo);\n}\n\nfunction* watchRemoveTodo() {\n    yield takeEvery(REQUEST_TO_REMOVE, requestRemoveTodo);\n}\n\nfunction* watchToggleTodo() {\n    yield takeEvery(REQUEST_TO_TOGGLE, requestToggleTodo);\n}\n\nfunction* watchReset() {\n    yield takeEvery(REQUEST_TO_RESET, requestReset);\n}\n\nconst rootSaga = function* root() {\n    yield all([\n        fork(watchAddTodo),\n        fork(watchRemoveTodo),\n        fork(watchToggleTodo),\n        fork(watchReset)\n    ])\n}\n\nexport default rootSaga;","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { reducer } from '../app/reducer';\n\nimport rootSaga from './sagas';\n\nexport type AppState = ReturnType<typeof reducer> \n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [\n    sagaMiddleware\n]\n\nconst store = createStore(reducer, compose(applyMiddleware(...middlewares)));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport { Dispatch } from 'redux';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport clsx from 'clsx';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport MaterialUIList from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { Todo } from '../app/types';\n\nimport { requestToToggle, requestToRemove } from './actions';\nimport { Actions } from './types';\nimport { AppState } from './store';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        activeTodo: {\n            textDecoration: 'line-through'\n        }\n    }),\n);\n\nconst List = () => {\n    const classes = useStyles()\n    const dispatch = useDispatch<Dispatch<Actions>>()\n    const todos = useSelector<AppState, Array<Todo>>(state => state.todos)\n\n    return(\n        <MaterialUIList disablePadding>\n            {todos.map(todo => {\n                return (\n                    <ListItem \n                        key={todo.id} \n                        dense\n                        button\n                        onClick={() => dispatch(requestToToggle(todo.id))}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={!todo.active}\n                                tabIndex={-1}\n                                disableRipple\n                            />\n                        </ListItemIcon>\n                        <ListItemText className={clsx(!todo.active && classes.activeTodo)}>\n                            {todo.title}\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <IconButton \n                                onClick={() => dispatch(requestToRemove(todo.id))}\n                                edge=\"end\"\n                                color=\"primary\"\n                                size=\"small\"\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                )\n            })}\n        </MaterialUIList>\n    )\n}\n\nexport default List;","import { Todo } from '../app/types';\nimport { RequestToAdd, RequestToRemove, RequestToToggle, RequestToReset } from './types';\nimport * as constants from './constants';\n\nexport const requestToAdd = (todo: Todo): RequestToAdd => ({ type: constants.REQUEST_TO_ADD, todo })\nexport const requestToRemove = (id: string): RequestToRemove => ({ type: constants.REQUEST_TO_REMOVE, id })\nexport const requestToToggle = (id: string): RequestToToggle => ({ type: constants.REQUEST_TO_TOGGLE, id })\nexport const requestToReset = (): RequestToReset => ({ type: constants.REQUEST_TO_RESET })\n","import React, { useState } from 'react';\nimport { Dispatch } from 'redux';\nimport { useDispatch } from 'react-redux';\n\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport { createTodo } from '../app/helpers';\n\nimport { requestToAdd } from './actions';\nimport { Actions } from './types';\n\nconst Form = () => {\n\n    const dispatch = useDispatch<Dispatch<Actions>>()\n    \n    const [title, setTitle] = useState('')\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        const todo = createTodo('saga_todo_', title)\n\n        dispatch(requestToAdd(todo))\n        setTitle('')\n    }\n\n    return(\n        <form onSubmit={handleSubmit} autoComplete=\"off\">\n            <TextField\n                name=\"todo\"\n                label=\"Add todo\"\n                value={title}\n                onChange={e => setTitle(e.target.value)}\n                margin=\"normal\"\n                fullWidth\n                required\n                InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">\n                        <IconButton \n                            type=\"submit\" \n                            color=\"primary\"\n                            size=\"small\"\n                        >\n                            <AddIcon />\n                        </IconButton>\n                    </InputAdornment>,\n                }}\n            />\n        </form>\n    )\n}\n\nexport default Form;","import React from 'react';\nimport { Dispatch } from 'redux';\nimport { useDispatch } from 'react-redux';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport { requestToReset } from './actions';\nimport { Actions } from './types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        button: {\n            marginTop: theme.spacing(1),\n        }\n    }),\n);\n\nconst ResetButton = () => {\n    const classes = useStyles()\n    const dispatch = useDispatch<Dispatch<Actions>>()\n\n    return(\n        <Button \n            onClick={() => dispatch(requestToReset())}\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.button}\n        >\n            Reset\n        </Button>\n    )\n}\n\nexport default ResetButton;","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Navigation from '../app/navigation';\n\nimport store from './store';\n\nimport List from './list';\nimport Form from './form';\nimport ResetButton from './resetButton';\n\nconst Main = () => (\n    <Provider store={store}>\n        <Container maxWidth=\"sm\">\n            <Navigation />\n            <Typography variant=\"h5\">\n                Todos With Redux-Saga\n            </Typography>\n            <Form />\n            <List />\n            <ResetButton />\n        </Container>\n    </Provider>\n)\n\nexport default Main;","import { Dispatch, useContext, createContext } from 'react';\n\nimport { State, Actions } from '../app/types';\nimport { initialState } from '../app/reducer';\n\nexport const TodoStateContext = createContext<State>(initialState);\nexport const TodoDispatchContext = createContext<Dispatch<Actions>>(() => {});\n\nexport const useTodoState = () => useContext(TodoStateContext);\nexport const useTodoDispatch = () => useContext(TodoDispatchContext);\n","import React from 'react';\n\nimport clsx from 'clsx';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport MaterialUIList from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { remove, toggle } from '../app/actions';\n\nimport { useTodoState, useTodoDispatch } from './store';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        activeTodo: {\n            textDecoration: 'line-through'\n        }\n    }),\n);\n\nconst List = () => {\n    const classes = useStyles()\n    const { todos } = useTodoState()\n    const dispatch = useTodoDispatch()\n\n    return (\n        <MaterialUIList disablePadding>\n            {todos.map(todo => {\n                return (\n                    <ListItem \n                        key={todo.id} \n                        dense\n                        button\n                        onClick={() => dispatch(toggle(todo.id))}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={!todo.active}\n                                tabIndex={-1}\n                                disableRipple\n                            />\n                        </ListItemIcon>\n                        <ListItemText className={clsx(!todo.active && classes.activeTodo)}>\n                            {todo.title}\n                        </ListItemText>\n                        <ListItemSecondaryAction>\n                            <IconButton \n                                onClick={() => dispatch(remove(todo.id))}\n                                edge=\"end\"\n                                color=\"primary\"\n                                size=\"small\"\n                            >\n                                <DeleteIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                )\n            })}\n        </MaterialUIList>\n    )\n}\n\nexport default List;","import React, { useState } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport { add } from '../app/actions';\nimport { createTodo } from '../app/helpers';\n\nimport { useTodoDispatch } from './store';\n\nconst Form = () => {\n    const [title, setTitle] = useState('')\n    const dispatch = useTodoDispatch()\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        const todo = createTodo('context_api_todo_', title)\n\n        dispatch(add(todo))\n        setTitle('')\n    }\n\n    return(\n        <form onSubmit={handleSubmit} autoComplete=\"off\">\n            <TextField\n                name=\"todo\"\n                label=\"Add todo\"\n                value={title}\n                onChange={e => setTitle(e.target.value)}\n                margin=\"normal\"\n                fullWidth\n                required\n                InputProps={{\n                    endAdornment: <InputAdornment position=\"end\">\n                        <IconButton \n                            type=\"submit\" \n                            color=\"primary\"\n                            size=\"small\"\n                        >\n                            <AddIcon />\n                        </IconButton>\n                    </InputAdornment>,\n                }}\n            />\n        </form>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport { reset } from '../app/actions';\n\nimport { useTodoDispatch } from './store';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        button: {\n            marginTop: theme.spacing(1),\n        }\n    }),\n);\n\nconst ResetButton = () => {\n    const classes = useStyles()\n    const dispatch = useTodoDispatch()\n\n    return (\n        <Button \n            onClick={() => dispatch(reset())}\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.button}\n        >\n            Reset\n        </Button>\n    )\n}\n\nexport default ResetButton;\n","import React, { useReducer } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport { initialState, reducer } from '../app/reducer';\nimport Navigation from '../app/navigation';\n\nimport { TodoStateContext, TodoDispatchContext } from './store';\n\nimport List from './list';\nimport Form from './form';\nimport ResetButton from './resetButton';\n\nconst Main = () => {\n\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    return (\n        <TodoStateContext.Provider value={state}>\n            <TodoDispatchContext.Provider value={dispatch}>\n                <Container maxWidth=\"sm\">\n                    <Navigation />\n                    <Typography variant=\"h5\">\n                        Todos With Context Api\n                    </Typography>\n                    <Form />\n                    <List />\n                    <ResetButton />\n                </Container>\n            </TodoDispatchContext.Provider>\n        </TodoStateContext.Provider>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nimport Main from './main';\nimport HooksTodo from './hooks-todo';\nimport ReduxThunkTodo from './redux-thunk-todo';\nimport ReduxSagaTodo from './redux-saga-todo';\nimport ContextApiTodo from './context-api-todo';\n\nconst theme = createMuiTheme({\n    typography: {\n        fontFamily: [\n          'Muli',\n          'sans-serif'\n        ].join(','),\n    }\n});\n\nconst App = () => (\n    <ThemeProvider theme={theme}>\n        <HashRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route exact path='/' component={Main}/>\n                <Route exact path='/hooks' component={HooksTodo}/>\n                <Route exact path='/redux-thunk' component={ReduxThunkTodo}/>\n                <Route exact path='/redux-saga' component={ReduxSagaTodo}/>\n                <Route exact path='/context-api' component={ContextApiTodo}/>\n                <Route component={() => <p>404 Not Found</p>}/>\n            </Switch>\n        </HashRouter>\n    </ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}