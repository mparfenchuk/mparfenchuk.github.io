{"version":3,"sources":["assets/icons/building.svg","components/ProgressBarWithLogo/ProgressBarWithLogo.js","hooks/useSimulateUploading.js","utils/validateFile.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","ProgressBarWithLogo","logo","size","percentage","strokeWidth","radius","dashArray","Math","PI","dashOffset","className","width","height","viewBox","cx","cy","r","transform","style","strokeDasharray","strokeDashoffset","src","buildingIcon","alt","useSimulateUploading","timerRef","useRef","useState","status","progress","uploading","setUploading","useEffect","clearInterval","current","response","file","startUploading","prevState","setInterval","cancelUploading","validateFile","type","indexOf","alert","reader","FileReader","onload","e","image","Image","target","result","this","readAsDataURL","App","inputRef","dragging","setDragging","onDragEnter","preventDefault","onDragOver","onDragLeave","onDrop","dataTransfer","files","onClick","value","click","ref","id","onChange","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ecb7aeaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/building.2db17e0c.svg\";","// @flow\nimport React from 'react';\n\nimport buildingIcon from '../../assets/icons/building.svg';\n\nimport './ProgressBarWithLogo.scss'\n\ntype Props = {\n    logo?: string,\n    size?: number,\n    percentage?: number,\n    strokeWidth?: number\n}\n\nconst ProgressBarWithLogo = ({\n    logo,\n    size = 80,\n    percentage = 0,\n    strokeWidth = 1\n}: Props) => {\n\n    const radius = (size - strokeWidth) / 2;\n    const dashArray = radius * Math.PI * 2;\n    const dashOffset = dashArray - dashArray * percentage / 100;\n\n    return (\n        <div className=\"progress-bar-with-logo\">\n            <svg\n                width={size}\n                height={size}\n                viewBox={`0 0 ${size} ${size}`}\n            >\n                <circle\n                    className=\"progress-bar-with-logo__background\"\n                    cx={size / 2}\n                    cy={size / 2}\n                    r={radius}\n                    strokeWidth={`${strokeWidth}px`} \n                />\n                <circle\n                    className=\"progress-bar-with-logo__progress\"\n                    cx={size / 2}\n                    cy={size / 2}\n                    r={radius}\n                    strokeWidth={`${strokeWidth}px`}\n                    transform={`rotate(-90 ${size / 2} ${size / 2})`}\n                    style={{\n                        strokeDasharray: dashArray,\n                        strokeDashoffset: dashOffset\n                    }} \n                />\n            </svg>\n            <img src={logo ? logo : buildingIcon} alt=\"logo\" className=\"progress-bar-with-logo__image\" />\n        </div>\n    );\n}\n\nexport default ProgressBarWithLogo;","// @flow\nimport { useState, useEffect, useRef } from 'react';\n\ntype uploadingProps = {\n    status: boolean,\n    progress: number,\n    file?: string,\n    response?: string\n}\n\nconst useSimulateUploading = () => {\n    const timerRef = useRef<IntervalID | null>(null);\n    const [uploading, setUploading] = useState<uploadingProps>({ \n        status: false, \n        progress: 0\n    });\n\n    const startUploading = (file: string) => {\n        setUploading(prevState => ({ ...prevState, progress: 0, status: true, file }));\n        timerRef.current = setInterval(() => {\n            setUploading(prevState => ({ \n                ...prevState, \n                progress: prevState.progress + 1 \n            }));\n        }, 50)\n    };\n\n     const cancelUploading = () => {\n        clearInterval(timerRef.current);\n        setUploading(prevState => ({ ...prevState, status: false, progress: 0 }));\n    };\n\n    useEffect(() => {\n        if (uploading.progress >= 100) {\n            clearInterval(timerRef.current);\n            setUploading({ status: false, progress: 0, response: uploading.file });\n        }\n    }, [uploading])\n\n    useEffect(() => {\n        return () => {\n            clearInterval(timerRef.current);\n        }\n    }, [])\n\n    return [uploading, { startUploading, cancelUploading }];\n}\n\nexport default useSimulateUploading;","// @flow\nconst validateFile = (\n    file: File, \n    startUploading: (file: string) => void\n) => {\n    if (!file) return false;\n\n    const supportedFilesTypes = ['image/jpeg', 'image/png'];\n    const { type } = file;\n    \n    if (supportedFilesTypes.indexOf(type) === -1) {\n        alert('Logo should be png or jpeg file format');\n        return false;\n    } else {\n        const reader = new FileReader();\n        reader.onload = (e: any) => {\n            const image = new Image();\n            image.src = e.target.result;\n            image.onload = function () {\n                const height = this.height;\n                const width = this.width;\n                if (height !== 100 || width !== 100) {\n                    alert('Logo should be square, 100px size');\n                    return false;\n                }\n                return startUploading(e.target.result);\n            };\n        };\n        reader.readAsDataURL(file);\n    }\n}\n\nexport default validateFile;","// @flow\nimport React, { useRef, useState } from 'react';\n\nimport ProgressBarWithLogo from '../components/ProgressBarWithLogo';\n\nimport useSimulateUploading from '../hooks/useSimulateUploading';\nimport validateFile from '../utils/validateFile';\n\nimport './App.scss';\n\nconst App = () => {\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const [uploading, { startUploading, cancelUploading }] = useSimulateUploading();\n\n    const onDragEnter = e => {\n        e.preventDefault();\n        setDragging(true);\n    }\n\n    const onDragLeave = e => {\n        e.preventDefault();\n        setDragging(false);\n    }\n\n    const onDragOver = e => e.preventDefault();\n\n    const onDrop = e => {\n        e.preventDefault();\n        setDragging(false);\n        if (uploading.status) return;\n\n        validateFile(e.dataTransfer.files[0], startUploading);\n    };\n\n    const openFileDialog = () => {\n        if(inputRef.current) {\n            inputRef.current.value = '';\n            inputRef.current.click();\n        }\n    };\n\n    const onChangeFile = e => {\n        e.preventDefault();\n        if (uploading.status) return;\n        \n        validateFile(e.target.files[0], startUploading);\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"header\">\n                <div className=\"header__title\">\n                    Company logo\n                </div>\n                <div className=\"header__subtitle\">\n                    Logo should be square, 100px size and in png, jpeg file format.\n                </div>\n            </div>\n            <div className=\"divider\" />\n            <div \n                onDragEnter={onDragEnter} \n                onDragOver={onDragOver} \n                onDragLeave={onDragLeave}\n                onDrop={onDrop}\n                className={`uploading-area${dragging ? ' uploading-area--active' : ''}`}\n            >\n                <div className={`uploading-content${dragging ? ' uploading-content--active' : ''}`}>\n                    <ProgressBarWithLogo\n                        logo={uploading.response}\n                        percentage={uploading.progress}\n                    />\n                    <span className=\"uploading-content__text\">\n                        {uploading.status ? 'Uploading' : uploading.response ? 'Drag & drop here to replace' : 'Drag & drop here'}\n                    </span>\n                    <span className=\"uploading-content__or\">\n                        - or -\n                    </span>\n                    <span \n                        className=\"uploading-content__link\"\n                        onClick={uploading.status ? cancelUploading : openFileDialog}\n                    >\n                        {uploading.status ? 'Cancel' : uploading.response ? 'Select file to replace' : 'Select file to upload'}\n                    </span>\n                    <input \n                        ref={inputRef} \n                        type=\"file\" \n                        id=\"file\" \n                        className=\"uploading-content__input\"\n                        onChange={onChangeFile}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}