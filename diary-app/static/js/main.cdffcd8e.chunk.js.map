{"version":3,"sources":["utils/storage.ts","app/App.reducer.ts","app/App.constants.ts","app/App.context.ts","app/theme/GlobalStyle.ts","core/diary/Diary.styled.ts","app/App.styled.ts","core/diary/components/Notes/components/Form/Form.styled.ts","core/diary/components/Notes/components/Form/Form.tsx","utils/newNote.ts","app/App.actions.ts","core/diary/components/Notes/components/List/components/Note/Note.styled.ts","core/diary/components/Notes/components/List/components/Note/Note.tsx","core/diary/components/Notes/components/List/List.tsx","core/diary/components/Notes/Notes.tsx","core/diary/components/Comments/components/Comment/Comment.styled.ts","core/diary/components/Comments/components/Comment/Comment.tsx","core/diary/components/Comments/components/Form/Form.styled.ts","core/diary/components/Comments/components/Form/Form.tsx","utils/newComment.ts","core/diary/components/Comments/Comments.tsx","core/diary/Diary.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["saveDiaryNotes","state","localStorage","setItem","JSON","stringify","initialState","notes","parse","getItem","getDiaryNotes","reducer","action","type","note","payload","id","map","selected","filter","comment","comments","DiaryStateContext","createContext","DiaryDispatchContext","useDiaryState","useContext","useDiaryDispatch","GlobalStyle","createGlobalStyle","Wrapper","styled","div","Sidebar","Title","h1","Description","p","Container","Paper","Alert","Button","button","props","delete","List","inverse","Divider","hr","FormGroup","Input","input","Form","dispatch","useState","inputValue","setInputValue","value","onChange","e","target","placeholder","onClick","text","uuidv1","addNewNote","VerticalLine","Text","Counter","span","memo","counter","selectNote","stopPropagation","deleteNote","length","key","Notes","Color","color","ColorPicker","Textarea","textarea","Popover","Cover","textValue","setTextValue","displayColorPicker","setDisplayColorPicker","setColor","triangle","colorResult","hex","onKeyPress","ctrlKey","charCode","newComment","addComment","Comments","selectedNote","find","App","useReducer","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdffcd8e.chunk.js","sourcesContent":["import { Note } from 'app/App.interfaces';\n\nexport const getDiaryNotes = (): Array<Note> => {\n  let state = []\n  try {\n    state = JSON.parse(localStorage.getItem('diary_notes') || '[]');\n  } catch {}\n  return state;\n} \n\nexport const saveDiaryNotes = (state: Array<Note>) => {\n  try {\n    localStorage.setItem('diary_notes', JSON.stringify(state))\n  } catch {}\n}","import { State, AddNewNote, SelectNote, DeleteNote, AddComment } from './App.interfaces';\nimport * as constants from './App.constants';\n\nimport { getDiaryNotes, saveDiaryNotes } from 'utils/storage';\n\nexport type Actions = AddNewNote | SelectNote | DeleteNote | AddComment\n\nexport const initialState: State = {\n  notes: getDiaryNotes()\n}\n\nexport const reducer = (state = initialState, action: Actions): State => {\n  switch(action.type){\n    case constants.ADD_NEW_NOTE: {\n      const { note } = action.payload;\n      const notes = [note, ...state.notes];\n      saveDiaryNotes(notes);\n      return {\n        notes\n      }\n    }\n    case constants.SELECT_NOTE: {\n      const { id } = action.payload;\n      const notes = state.notes.map(note => note.id === id \n        ? { ...note, selected: true }\n        : note.id !== id && note.selected \n          ? { ...note, selected: false }\n          : note);\n      saveDiaryNotes(notes);\n      return { \n        notes\n      }\n    }\n    case constants.DELETE_NOTE: {\n      const { id } = action.payload;\n      const notes = state.notes.filter(note => note.id !== id);\n      saveDiaryNotes(notes);\n      return { \n        notes\n      }\n    }\n    case constants.ADD_COMMENT: {\n      const { comment } = action.payload;\n      const notes = state.notes.map(note => note.selected\n        ? { ...note, comments: [comment, ...note.comments] }\n        : note);\n      saveDiaryNotes(notes);\n      return { \n        notes\n      }\n    }\n    default:\n      return state\n  }\n}","export const ADD_NEW_NOTE = \"ADD_NEW_NOTE\"\nexport type ADD_NEW_NOTE = typeof ADD_NEW_NOTE\n\nexport const SELECT_NOTE = \"SELECT_NOTE\"\nexport type SELECT_NOTE = typeof SELECT_NOTE\n\nexport const DELETE_NOTE = \"DELETE_NOTE\"\nexport type DELETE_NOTE = typeof DELETE_NOTE\n\nexport const ADD_COMMENT = \"ADD_COMMENT\"\nexport type ADD_COMMENT = typeof ADD_COMMENT","import { Dispatch, useContext, createContext } from 'react';\n\nimport { State } from './App.interfaces';\nimport { initialState, Actions } from './App.reducer';\n\nexport const DiaryStateContext = createContext<State>(initialState);\nexport const DiaryDispatchContext = createContext<Dispatch<Actions>>(() => {});\n\nexport const useDiaryState = () => useContext(DiaryStateContext);\nexport const useDiaryDispatch = () => useContext(DiaryDispatchContext);","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    margin: 0;\n    height: 100%;\n    font-family: 'Vollkorn', serif;\n  }\n  body > div {\n    height: 100%\n  }\n  h1, p, hr {\n    margin: 0;\n  }\n  input, button, textarea {\n    font-family: 'Vollkorn', serif;\n    outline: none;\n  }\n`\n\nexport default GlobalStyle;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n`\n\nexport const Sidebar = {\n  Wrapper: styled.div`\n    flex: 1;\n    padding: 24px;\n    background: #2a2f3e;\n  `,\n  Title: styled.h1`\n    text-transform: uppercase;\n    color: white;\n  `,\n  Description: styled.p`\n    color: #c9c9c9;\n    font-size: 18px;\n  `\n}\n\nexport const Container = styled.div`\n  display: flex;\n  flex: 4;\n  flex-direction: row;\n  padding: 12px;\n`","import styled from 'styled-components';\n\nexport const Paper = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  margin: 12px;\n  box-shadow: 0 0 4px rgba(0,0,0,0.6);\n`\n\nexport const Title = styled.h1`\n  color: black;\n  margin: 24px 24px 12px 24px;\n`\n\nexport const Alert = styled.p`\n  color: black;\n  margin: 0px 24px;\n`\n\nexport const Button = styled.button<{ delete?: boolean }>`\n  min-width: 92px;\n  background: ${props => props.delete ? \"white\" : \"#27ccc0\"};\n  color: ${props => props.delete ? \"#ff2f5a\" : \"white\"};\n  font-size: 14px;\n  padding: 6px 8px;\n  border: ${props => props.delete ? \"1px solid #ff2f5a\" : \"none\"};\n  border-radius: 2px;\n  margin-right: ${props => props.delete ? \"24px\" : \"0px\"};\n  cursor: pointer;\n  box-shadow: 0 2px 0px rgba(0,0,0,0.6);\n  transform: translateY(-1px);\n  :active {\n    box-shadow: 0 0px rgba(0,0,0,0.6);\n    transform: translateY(1px);\n  }\n`\n\nexport const List = styled.div<{ inverse?: boolean }>`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: scroll;\n  padding: 12px 0px;\n  flex-direction: ${props => props.inverse ? \"column-reverse\" : \"\"};\n`\n\nexport const Divider = styled.hr`\n  border: 0.5px solid rgba(0,0,0,0.1);\n  margin: 0.5px 24px;\n`","import styled from 'styled-components';\n\nexport const FormGroup = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0px 24px;\n`\n\nexport const Input = styled.input`\n  width: 100%;  \n  padding: 6px 12px;\n  margin-right: 8px;\n  font-size: 14px;\n  border: 1px solid rgba(0,0,0,0.2);\n  border-radius: 2px;\n  ::placeholder {\n    color: rgba(0,0,0,0.3);\n  }\n`","import React, { useState } from 'react';\n\nimport { useDiaryDispatch } from 'app/App.context';\nimport { addNewNote } from 'app/App.actions';\nimport { newNote } from 'utils/newNote';\n\nimport { Button } from 'app/App.styled';\nimport { FormGroup, Input } from './Form.styled';\n\nconst Form: React.FC = () => {\n  const dispatch = useDiaryDispatch()\n  const [inputValue, setInputValue] = useState<string>('')\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)\n  const onClick = () => {\n    const note = newNote(inputValue)\n    dispatch(addNewNote(note))\n    setInputValue('')\n  }\n\n  return (\n    <FormGroup>\n      <Input \n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder=\"Type your note here...\" \n      />\n      <Button onClick={onClick}>\n        Add new\n      </Button>\n    </FormGroup>\n  )\n}\n\nexport default Form;","import uuidv1 from 'uuid/v1';\nimport { Note } from 'app/App.interfaces';\n\nexport const newNote = (text: string): Note => ({\n  id: uuidv1(),\n  selected: false,\n  text,\n  comments: []\n});","import { AddNewNote, SelectNote, DeleteNote, AddComment,\n  Note, Comment } from './App.interfaces';\nimport * as constants from './App.constants';\n\nexport const addNewNote = (note: Note): AddNewNote => ({\n  type: constants.ADD_NEW_NOTE,\n  payload: {\n    note\n  }\n})\n\nexport const selectNote = (id: string): SelectNote => ({\n  type: constants.SELECT_NOTE,\n  payload: {\n    id\n  }\n})\n\nexport const deleteNote = (id: string): DeleteNote => ({\n  type: constants.DELETE_NOTE,\n  payload: {\n    id\n  }\n})\n\nexport const addComment = (comment: Comment): AddComment => ({\n  type: constants.ADD_COMMENT,\n  payload: {\n    comment\n  }\n})","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  padding: 12px 0px;\n  cursor: pointer;\n`\n\nexport const VerticalLine = styled.div`\n  width: 4px;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  background: #ff2f5a;\n`\n\nexport const Text = styled.p`\n  width: 100%;\n  color: black;\n  font-weight: bold;\n  margin-right: 8px;\n  margin-left: 24px;\n`\n\nexport const Counter = styled.span`\n  background: #27ccc0;\n  color: white;\n  font-size: 12px;\n  font-weight: bold;\n  white-space: nowrap;\n  padding: 4px 8px;\n  margin: 0px 8px;\n  border-radius: 16px;\n`","import React, { memo } from 'react';\n\nimport { useDiaryDispatch } from 'app/App.context';\nimport { deleteNote, selectNote } from 'app/App.actions';\nimport { Button, Divider } from 'app/App.styled';\nimport { Wrapper, VerticalLine, Text, Counter } from './Note.styled';\n\ninterface Props {\n  id: string;\n  selected: boolean;\n  counter: number;\n  text: string;\n}\n\nconst Note: React.FC<Props> = ({\n  id, selected,\n  counter, text\n}) => {\n  const dispatch = useDiaryDispatch()\n  const buttonOnClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation()\n    dispatch(deleteNote(id))\n  }\n  const noteOnClick = () => dispatch(selectNote(id))\n\n  return (\n    <>\n      <Wrapper onClick={noteOnClick}>\n        {selected && <VerticalLine />}\n        <Text>\n          {text}\n          <Counter>\n            {counter}\n          </Counter>\n        </Text>\n        <Button delete onClick={buttonOnClick}>\n          Delete\n        </Button>\n      </Wrapper>\n      <Divider />\n    </>\n  )\n}\n\nexport default memo(Note);","import React from 'react';\n\nimport { useDiaryState } from 'app/App.context';\n\nimport { List as StyledList, Alert } from 'app/App.styled';\n\nimport Note from './components/Note';\n\nconst List: React.FC = () => {\n  const { notes } = useDiaryState()\n\n  return (\n    <StyledList>\n      {notes.length === 0 \n        && <Alert>There are no notes...</Alert>}\n      {notes.map(note => \n        <Note\n          key={note.id}\n          id={note.id}\n          selected={note.selected}\n          counter={note.comments.length}\n          text={note.text}\n        />\n      )}\n    </StyledList>\n  )\n}\n  \n\nexport default List;","import React from 'react';\n\nimport { Paper, Title } from 'app/App.styled';\n\nimport Form from './components/Form';\nimport List from './components/List';\n\nconst Notes: React.FC = () =>\n  <Paper>\n    <Title>\n      Notes\n    </Title>\n    <Form />\n    <List />\n  </Paper>\n\nexport default Notes;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  padding: 12px 0px;\n`\n\nexport const Color = styled.div<{ color: string }>`\n  min-width: 50px;\n  width: 50px;\n  height: 50px;\n  background: ${props => props.color};\n  margin-right: 12px;\n  margin-left: 24px;\n`\n\nexport const Text = styled.p`\n  width: 100%;\n  color: black;\n  font-size: 14px;\n  white-space: pre-wrap;\n  margin-right: 24px;\n`","import React, { memo } from 'react';\n\nimport { Divider } from 'app/App.styled';\nimport { Wrapper, Color, Text } from './Comment.styled';\n\ninterface Props {\n  text: string;\n  color: string;\n}\n\nconst Comment: React.FC<Props> = ({ text, color }) => \n  <>\n    <Divider />\n    <Wrapper>\n      <Color color={color} />\n      <Text>\n        {text}\n      </Text>\n    </Wrapper>\n  </>\n\nexport default memo(Comment);","import styled from 'styled-components';\n\nexport const FormGroup = styled.div`\n  display: flex;\n  margin: 0px 24px 24px 24px;\n`\n\nexport const ColorPicker = styled.div<{ color: string }>`\n  min-width: 50px;\n  width: 50px;\n  height: 50px;\n  background: ${props => props.color};\n  margin-right: 12px;\n  cursor: pointer;\n`\n\nexport const Textarea = styled.textarea`\n  width: 100%;\n  height: 80px;\n  padding: 6px 12px;\n  font-size: 14px;\n  border: 1px solid rgba(0,0,0,0.2);\n  border-radius: 2px;\n  ::placeholder {\n    color: rgba(0,0,0,0.3);\n  }\n`\n\nexport const Popover = styled.div`\n  position: absolute;\n  zIndex: 2\n`\n\nexport const Cover = styled.div`\n  position: fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px\n`","import React, { useState, memo } from 'react';\nimport { TwitterPicker, ColorResult } from 'react-color';\n\nimport { useDiaryDispatch } from 'app/App.context';\nimport { addComment } from 'app/App.actions';\nimport { newComment } from 'utils/newComment';\n\nimport { FormGroup, ColorPicker, Textarea, Popover, Cover } from './Form.styled';\n\nconst Form: React.FC = () => {\n  const dispatch = useDiaryDispatch()\n  const [textValue, setTextValue] = useState<string>('')\n  const [displayColorPicker, setDisplayColorPicker] = useState<boolean>(false)\n  const [color, setColor] = useState<string>('#e5e5e5')\n\n  const openColorPicker = () => setDisplayColorPicker(true)\n  const closeColorPicker = () => setDisplayColorPicker(false)\n  const changeColor = (colorResult: ColorResult) => setColor(colorResult.hex)\n\n  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => setTextValue(e.target.value)\n  const addNewComment = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if(e.ctrlKey && e.charCode === 13){\n      const comment = newComment(color, textValue);\n      dispatch(addComment(comment))\n      setTextValue('')\n      setColor('#e5e5e5')\n    }\n  }\n\n  return (\n    <FormGroup>\n      <ColorPicker \n        color={color} \n        onClick={openColorPicker} \n      />\n      {displayColorPicker && <Popover>\n        <Cover onClick={closeColorPicker} />\n        <TwitterPicker \n          triangle=\"hide\"\n          color={color} \n          onChange={changeColor} \n        />\n      </Popover>}\n      <Textarea \n        value={textValue}\n        onChange={handleTextChange}\n        onKeyPress={addNewComment}\n        placeholder=\"Write something and pick up your mood color\" \n      />\n    </FormGroup>\n  )\n}\n\nexport default memo(Form);","import uuidv1 from 'uuid/v1';\nimport { Comment } from 'app/App.interfaces';\n\nexport const newComment = (color: string, text: string): Comment => ({\n  id: uuidv1(),\n  text,\n  color\n});","import React from 'react';\n\nimport { useDiaryState } from 'app/App.context';\n\nimport { Paper, Title, List, Alert } from 'app/App.styled';\n\nimport Comment from './components/Comment';\nimport Form from './components/Form';\n\nconst Comments: React.FC = () => {\n  // should use selector and memoization for this \n  const { notes } = useDiaryState()\n  const selectedNote = notes.find(note => note.selected);\n\n  return (\n    <Paper>\n      <Title>\n        Comments\n      </Title>\n      <List inverse={selectedNote && true}>\n        {selectedNote \n          ? <>\n          {selectedNote.comments.length === 0 \n            && <Alert>There are no comments...</Alert>}\n          {selectedNote.comments.map(comment => \n            <Comment \n              key={comment.id}\n              text={comment.text}\n              color={comment.color}\n            />\n          )}\n          </>\n          : <Alert>Choose note to add comments...</Alert>}\n      </List>\n      {selectedNote && <Form />}\n    </Paper>\n  )\n}\n  \n\nexport default Comments;","import React, { memo } from 'react';\n\nimport { Wrapper, Sidebar, Container } from './Diary.styled';\n\nimport Notes from './components/Notes';\nimport Comments from './components/Comments';\n\nconst Diary: React.FC = () =>\n  <Wrapper>\n    <Sidebar.Wrapper>\n      <Sidebar.Title>\n        Diary\n      </Sidebar.Title>\n      <Sidebar.Description>\n        Write some notes and comment them \n      </Sidebar.Description>\n    </Sidebar.Wrapper>\n    <Container>\n      <Notes />\n      <Comments />\n    </Container>\n  </Wrapper>\n\n\nexport default memo(Diary);","import React, { useReducer } from 'react';\n\nimport { DiaryStateContext, DiaryDispatchContext } from './App.context';\nimport { initialState, reducer } from './App.reducer';\n\nimport GlobalStyle from './theme/GlobalStyle';\nimport Diary from 'core/diary';\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  return (\n    <DiaryStateContext.Provider value={state}>\n      <DiaryDispatchContext.Provider value={dispatch}>\n        <GlobalStyle />\n        <Diary />\n      </DiaryDispatchContext.Provider>\n    </DiaryStateContext.Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}